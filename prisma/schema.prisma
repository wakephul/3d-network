//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                 String            @id() @default(uuid())
  name               String?
  email              String?           @unique()
  pictureUrl         String?           @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation    String?
  status             UserStatus        @default(VERIFIED)
  globalRole         String            @default("USER")
  /// @password
  /// @omit
  password           String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt()
  pwaSubscriptions   PwaSubscription[] @relation("user")
  printers           Printer[]         @relation("user")
  reviews            Review[]          @relation("user")
  printOrders        PrintOrder[]      @relation("user")
  messagesAsSender   Message[]         @relation("sender")
  messagesAsReceiver Message[]         @relation("receiver")
}

/// @@allow('all', true)
model Printer {
  id             String       @id() @default(uuid())
  name           String
  specifications String?
  location       String?
  pricePerGram   String?
  pricePerHour   String?
  rating         String?
  status         String?
  userId         String
  user           User?        @relation(fields: [userId], references: [id], name: "user")
  reviews        Review[]     @relation("printer")
  printOrders    PrintOrder[] @relation("printer")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Review {
  id        String   @id() @default(uuid())
  rating    Float
  comment   String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  printerId String
  printer   Printer? @relation(fields: [printerId], references: [id], name: "printer")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PrintOrder {
  id              String    @id() @default(uuid())
  modelFileUrl    String
  specifications  String?
  estimatedTime   Float?
  estimatedCost   String?
  status          String?
  deliveryAddress String?
  paymentStatus   String?
  userId          String
  user            User?     @relation(fields: [userId], references: [id], name: "user")
  printerId       String
  printer         Printer?  @relation(fields: [printerId], references: [id], name: "printer")
  messagesAsOrder Message[] @relation("order")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id         String      @id() @default(uuid())
  content    String
  senderId   String
  sender     User?       @relation(fields: [senderId], references: [id], name: "sender")
  receiverId String
  receiver   User?       @relation(fields: [receiverId], references: [id], name: "receiver")
  orderId    String?
  order      PrintOrder? @relation(fields: [orderId], references: [id], name: "order")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
